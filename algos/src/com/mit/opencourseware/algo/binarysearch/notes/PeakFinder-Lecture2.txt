6.006
http://courses.csail.mit.edu/6.006

URL : https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-006-introduction-to-algorithms-fall-2011/lecture-videos/lecture-1-algorithmic-thinking-peak-finding/

Course Overview
Efficient procedures for solving large scale problems
Scalability
Classic Data structures ( BST, Hash tables, Balance BST ), Classical Algorithms
Real implementations

Contents
8 Modules:
Algorithmic thinking : Peak finding
Sorting & Trees : Event Simulations
Hashing : Genome comparison
Numerics : RSA encryption
Graphs : Rubiks cube
Shortest path : Caltech to MIT
Dynamic programming : Image compression
Advanced topics :


Class 1 : Peak Finder

One- Dimensional Array  a,b,c,d,e,f,g,h,i
	Position 2 is peak iff b>= a and b>=c
	Position 9 is peak iff i >= h

Prolem: Find a peak if it exists.

Algorithm:  Theta ( n )

for( i =0; i < length; i ++ ){
	if( i == 0 ) {
		if( a[i] >= a[i+1] )
			Return a[i];
}else if ( i == length - 1 ){
	if( a[i] >= a[i-1])
		Return a[i];
}else{
if( a[i] >= a[i+1] && a[i] >= a[i-1] )
	Return a[i];
}

}

Return “No peak”


Algorithm : Logarithmic Time ( Divide and Conquer )

if( A[n/2] < a[n/2-1] ) then only look at left half to look for a peak.
Else if ( A[n/2] < a[n/2+1] then look at the right half
Else return n/2 position as it is the peak

t(n) = t(n/2)  + theta( 1 )

Base case :
t( 1 ) = theta ( 1 )

t( n ) = theta( log n base 2 )

====================================================================

2D version
N rows, M cols

Greedy Ascent algorithm Theta( mn ) if m=n Theta( n^2 )

